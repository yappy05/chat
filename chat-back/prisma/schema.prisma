// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:admin@localhost:5435/chat"
}

model User {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  password    String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt() @map("updated_at")
  directRooms Room[]
  Massage     Massage[]

  @@map("users")
}

model DirectRoom {
  id String @id @default(uuid())

  // Массив ID пользователей для удобства
  userIds String[] @default([])

  // Связь many-to-many с пользователями (через промежуточную таблицу)
  participants Room[]
  massages     Massage[]
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt() @map("updated_at")

  @@unique([userIds])
  @@map("direct_rooms")
}

// Промежуточная таблица для связи many-to-many
model Room {
  id String @id @default(uuid())

  // Внешние ключи
  userId       String
  directRoomId String

  // Связи с основными таблицами
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  directRoom DirectRoom @relation(fields: [directRoomId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  // Уникальное ограничение - пользователь может быть в комнате только один раз
  @@unique([userId, directRoomId])
  @@map("rooms")
}

model Massage {
  id String @id @default(uuid())

  text     String
  userId   String
  directId String

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  directRoom DirectRoom @relation(fields: [directId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("massages")
}
